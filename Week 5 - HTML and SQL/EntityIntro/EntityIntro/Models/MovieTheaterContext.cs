using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EntityIntro.Models;

//This class represents the connection between SQL and .Net. This where we pull in our Tables from SQL. 
//This file is totally autogenerated and you do not want to change it, otherwise it will break your connection in hard to track ways. 
public partial class MovieTheaterContext : DbContext
{
    public MovieTheaterContext()
    {
    }

    public MovieTheaterContext(DbContextOptions<MovieTheaterContext> options)
        : base(options)
    {
    }

    //Each DB set represent a table. The DB Set variables are how we call our tables in .Net
    public virtual DbSet<Movie> Movies { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //This passes in the connection for our database and SQL server
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=.\\SQLExpress;Database=MovieTheater;Trusted_Connection=True;TrustServerCertificate=True");

    //When we call our DB model, this enforces data types and SQL restriction/constraints 
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Movie>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Movies__3213E83FD67E556C");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Genre)
                .HasMaxLength(20)
                .HasColumnName("genre");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .HasColumnName("name");
            entity.Property(e => e.ReleaseYear).HasColumnName("releaseYear");
            entity.Property(e => e.RunTime).HasColumnName("runTime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
